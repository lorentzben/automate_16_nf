/*
 * -------------------------------------------------
 *  nf-core/ampliseq Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'

  withName: SetupPy2CondaEnv{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' )
  }
  withName: SetupRPackages{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' )
  }
  withName: VerifyManifest{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' )
  }
  withName: CheckSinglePaired{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' )
  }
  withName: GenerateSeqObject{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' )
  }
  withName: QualControl{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' )
  }
  withName: FindCutoffs{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' )
  }
  withName: Denoise{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' )
  }
  withName: FeatureVisualization{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' )  
  }
  withName: TreeConstruction{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' )  
  }
  withName: ExportTable{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' )  
  }
  withName: DetermineDepth{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' ) 
  }
  withName: AlphaDiversityMeasure{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' ) 
  }
  withName:  AssignTaxonomy{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' ) 
  }
  withName: CalcRareDepth{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' ) 
  }
  withName: RareCurveCalc{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' )  
  }
  withName: AlphaDiversitySignificance{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' )   
  }
  withName: BetaDiversitySignificance{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' )   
  }
  withName: GeneratePhylogeneticTrees{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' )
  }
  withName: LefseFormat{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' ) 
  }
  withName: LefseAnalysis{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' )  
  }
  withName: ExportSetup{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' )  
  }
  withName: GenerateReport{
    cpus = { check_max (8 * task.attempt, 'cpus' ) }
    memory = { check_max (28.GB * task.attempt, 'memory' ) }
    time = { check_max (18.h * task.attempt, 'time' )   
  }
  
}