/*
 * -------------------------------------------------
 *  automate 16s nf Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {
  help = false
  input = "seqs"
  outdir = './results'
  metadata = 'metadata.tsv'
  manifest = 'manifest.tsv'
  itemOfInterest = 'SampleID'
  name= false
  tracedir= './pipeline_info'
  

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
  conda { 
    process.conda = "$projectDir/environment.yml"
    process.conda = "$projectDir/python2_env.yml"
    process.conda = "$projectDir/r_env.yml"
    createTimeout=30 min
   }
  debug { process.beforeScript = 'echo $HOSTNAME' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'lorentzben/automate_16s_nf'
  author = 'Ben Lorentz'
  homePage = 'https://github.com/lorentzben/automate_16_nf'
  description = '16S rRNA amplicon sequencing analysis workflow using QIIME2'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.04.0'
  version = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}